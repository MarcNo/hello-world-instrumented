openshift.withCluster() {
    env.APP_NAME = 'multiline'
    env.APP_NAME_CANARY = "${APP_NAME}-canary"
    env.CICD_NAMESPACE = 'myproject'
    env.DEPLOY_NAMESPACE = 'hello'
    replicaCount = 3
}

/* Notes:
   Errors will stop execution, if Result.status!=0 return by api. This practically useful only in case of synchronous operations:
   openshift.startBuild(...,"--wait"), rollout.status()

   Rollout.status() streams the output and waits for the pods until Running. Pods should have readiness probes to make this useful.

   DeploymentConfig created by openshift.newApp() has the trigger autimatic=true, so it starts immediately.
   We create the DCs, let them start, then modify the DC and start the rollout again.

 */

pipeline {
    agent any
    stages {

        /*************
         * Canary deployment
         *************/
        //Need permission: oc policy add-role-to-user edit system:serviceaccount:myproject:jenkins -n $DEPLOY_PROJECT
        stage("Canary deployment") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("$DEPLOY_NAMESPACE") {
                            //Tag latest rom build namespace
                            openshift.tag("$CICD_NAMESPACE/$APP_NAME:latest", "$DEPLOY_NAMESPACE/$APP_NAME_CANARY:latest")

                            if (!openshift.selector('dc', APP_NAME_CANARY).exists()) {
                                /***
                                 * First deployment
                                 **/
                                echo "Create deployment config ${APP_NAME_CANARY} in namespace ${DEPLOY_NAMESPACE}"

                                //The canary deployment also has it's own image stream in this namespace.
                                //Create new app
                                def newAppSelector = openshift.newApp("$DEPLOY_NAMESPACE/$APP_NAME_CANARY", "--name=${APP_NAME_CANARY}",  "--labels=service=${APP_NAME}")

                                //wait for initial rollout
                                openshift.selector('dc', APP_NAME_CANARY).rollout().status()

                                //Remove automatic trigger from DeploymentConfig. It may or may not stop the first deployment if removed too early
                                openshift.set("triggers", "dc/$APP_NAME_CANARY", "--manual")
                                //Delete service, not needed
                                newAppSelector.narrow("svc").delete()

                                //Add readiness/liveness probes. These will be applied after the rollout upcoming.
                                openshift.set("probe dc/$APP_NAME_CANARY --readiness --get-url=http://:8080/health --initial-delay-seconds=10 --failure-threshold=10 --period-seconds=10")
                                openshift.set("probe dc/$APP_NAME_CANARY --liveness  --get-url=http://:8080/health --initial-delay-seconds=120 --failure-threshold=10 --period-seconds=10")
                            }
                            /***
                             * Rollout
                             **/
                            openshift.selector('dc', APP_NAME_CANARY).rollout().latest()
                            //wait for rollout
                            openshift.selector('dc', APP_NAME_CANARY).rollout().status()

                            //echo pods
                            echo "Canary pods up: " + openshift.selector('dc', APP_NAME_CANARY).related("pod").names()
                            def latestVersion = openshift.selector('dc', APP_NAME_CANARY).object().status.latestVersion
                            echo "Canary pods up: " + openshift.selector('pod',['deployment':"$APP_NAME_CANARY-${latestVersion}"]).names()
                        }
                    }
                }
            }
        }


        /*************
         * Ask to promote - when productionDc.exists()
         *************/
        stage("Input to promote") {
            when { //Only if production deployment already exists, otherwise automatically deploy there
                expression {
                    openshift.withCluster() {
                        openshift.withProject("$DEPLOY_NAMESPACE") {
                            return openshift.selector('dc', APP_NAME).exists()
                        }
                    }

                }
            }
            steps {
                script {
                    promoteOrRollback = input message: 'Promote or rollback canary deployment?',
                            parameters: [choice(name: "Promote or Rollback?", choices: 'Promote\nRollback', description: '')]
                }
            }
        }

        stage("Rollback canary"){
            when{
                expression {
                    return binding.hasVariable('promoteOrRollback') && promoteOrRollback == 'Rollback'
                }
            }
            steps{
                echo "Rollback for canary deployment."
                script {
                    openshift.withCluster {
                        openshift.withProject("$DEPLOY_NAMESPACE") {
                            openshift.selector('dc', APP_NAME_CANARY).rollout().undo()
                            //wait for pods to start
                            def latestVersion = openshift.selector('dc', APP_NAME_CANARY).object().status.latestVersion
                            echo "Canary pods after rollback: " + openshift.selector('pod',['deployment':"$APP_NAME_CANARY-${latestVersion}"]).names()
                            //tag back imagestream
                            openshift.tag("$DEPLOY_NAMESPACE/$APP_NAME:latest", "$DEPLOY_NAMESPACE/$APP_NAME_CANARY:latest")
                        }
                    }
                }

            }
        }



        /*************
         * Production deployment
         *************/
        stage("Production deployment") {
            when{
                not {
                    expression {
                        return binding.hasVariable('promoteOrRollback') && promoteOrRollback == 'Rollback'
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("$DEPLOY_NAMESPACE") {
                            //Tag latest from build namespace
                            openshift.tag("$CICD_NAMESPACE/$APP_NAME:latest", "$DEPLOY_NAMESPACE/$APP_NAME:latest")

                            if (!openshift.selector('dc', APP_NAME).exists()) {
                                /***
                                 * First deployment
                                 **/
                                echo "Create deployment config ${APP_NAME} in namespace ${DEPLOY_NAMESPACE}"

                                //Create new app
                                def newAppSelector = openshift.newApp("$DEPLOY_NAMESPACE/$APP_NAME", "--name=${APP_NAME}", "--labels=service=${APP_NAME}")

                                //wait for initial rollout
                                openshift.selector('dc', APP_NAME).rollout().status()

                                //Scale up
                                openshift.selector('dc', APP_NAME).scale("--replicas=${replicaCount}")

                                //Remove automatic trigger from DeploymentConfig
                                openshift.set("triggers", "dc/$APP_NAME", "--manual")

                                //Add readiness/liveness probes
                                openshift.set("probe dc/$APP_NAME --readiness --get-url=http://:8080/health --initial-delay-seconds=10 --failure-threshold=10 --period-seconds=10")
                                openshift.set("probe dc/$APP_NAME --liveness  --get-url=http://:8080/health --initial-delay-seconds=120 --failure-threshold=10 --period-seconds=10")

                                //Modify Service so the canary pods are also included, remove deploymentconfig label from selector
                                def newService = newAppSelector.narrow("svc").object()
                                newService.spec.selector = ['service': "$APP_NAME"]
                                openshift.replace(newService)

                                //Create route
                                newAppSelector.narrow("svc").expose()
                            }
                            /***
                             * Rollout
                             **/
                            openshift.selector('dc', APP_NAME).rollout().latest()
                            //wait for rollout. It waits until pods are running (if readiness probe is set)
                            openshift.selector('dc', APP_NAME).rollout().status()

                            //echo pods
                            echo "Pods up: " + openshift.selector('dc', APP_NAME).related("pod").names()
                            def latestVersion = openshift.selector('dc', APP_NAME).object().status.latestVersion
                            echo "Pods up: " + openshift.selector('pod',['deployment':"$APP_NAME-${latestVersion}"]).names()
                        }
                    }
                }
            }
        }
    }
}